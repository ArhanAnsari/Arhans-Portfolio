#!/usr/bin/env node

/**
 * AI Twin Interactive Setup Guide
 * Run: node ai-twin-interactive-setup.js
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
};

async function runSetup() {
  console.clear();
  console.log('╔════════════════════════════════════════════╗');
  console.log('║      🤖 AI Twin Setup Wizard 🤖            ║');
  console.log('╚════════════════════════════════════════════╝\n');

  console.log('Welcome! This wizard will help you set up your AI Twin.\n');

  // Choose AI Provider
  console.log('📋 Which AI provider would you like to use?\n');
  console.log('1. Claude AI (Recommended) - Most advanced, $');
  console.log('2. Ollama (Free) - No costs, runs locally');
  console.log('3. Demo Mode - Just for testing\n');

  const choice = await question('Enter your choice (1-3): ');

  let aiProvider = 'demo';
  let apiKey = '';

  if (choice === '1') {
    aiProvider = 'claude';
    console.log('\n📌 Claude AI Setup:\n');
    console.log('You need an API key from https://console.anthropic.com\n');
    apiKey = await question('Enter your ANTHROPIC_API_KEY: ');

    if (!apiKey) {
      console.log('⚠️  No API key provided. Switching to demo mode.\n');
      aiProvider = 'demo';
    }
  } else if (choice === '2') {
    aiProvider = 'ollama';
    console.log('\n📌 Ollama Setup:\n');
    console.log('Make sure you have Ollama installed: https://ollama.ai\n');
    console.log('Run: ollama pull mistral\n');
    const confirm = await question('Have you installed and started Ollama? (yes/no): ');
    if (confirm.toLowerCase() !== 'yes') {
      console.log('⚠️  Please install Ollama first: https://ollama.ai\n');
    }
  }

  // Create .env file
  console.log('\n✅ Creating .env file...\n');

  let envContent = '# AI Twin Configuration\n';
  envContent += '# Generated by setup wizard\n\n';

  if (aiProvider === 'claude') {
    envContent += `ANTHROPIC_API_KEY=${apiKey}\n`;
  }

  envContent += 'PORT=3001\n';
  envContent += 'NODE_ENV=development\n';
  envContent += `AI_PROVIDER=${aiProvider}\n`;

  fs.writeFileSync('.env', envContent);
  console.log('✅ .env file created!');

  // Install dependencies
  console.log('\n📦 Installing dependencies...\n');
  console.log('Run this command in your terminal:');
  console.log('npm install express cors dotenv\n');

  // Show next steps
  console.log('═══════════════════════════════════════════════\n');
  console.log('🎉 Setup Complete!\n');

  console.log('📌 Next Steps:\n');

  if (aiProvider === 'claude') {
    console.log('1. ✅ API Key configured');
  } else if (aiProvider === 'ollama') {
    console.log('1. 📌 Make sure Ollama is running (ollama serve)');
  } else {
    console.log('1. 📌 Running in demo mode (no API setup needed)');
  }

  console.log('2. 📦 Install backend dependencies:');
  console.log('   npm install express cors dotenv\n');
  console.log('3. 🚀 Run the backend server:');
  console.log('   node ai-twin-server.js\n');
  console.log('4. 🌐 Run the frontend (in another terminal):');
  console.log('   npm run dev\n');

  console.log('5. 🎨 (Optional) Customize your AI Twin:');
  console.log('   Edit SYSTEM_PROMPT in ai-twin-server.js\n');

  console.log('═══════════════════════════════════════════════\n');

  console.log('📚 For more info, read: AI_TWIN_SETUP.md\n');

  console.log('🤖 Your AI Twin is ready to go! Good luck! 🚀\n');

  rl.close();
}

runSetup().catch(console.error);
